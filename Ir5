 Implement Page Rank Algorithm. (Use python or beautiful soup for implementation). .

Selection deleted
import numpy as np
graph = {
    'A': ['B', 'C'],
    'B': ['C'],
    'C': ['A'],
    'D': ['C'],
    'E': ['A', 'D']
}
def calculate_pagerank(graph, d=0.85, num_iterations=100):
    # Initialize PageRank
    num_nodes = len(graph)
    pagerank = {node: 1 / num_nodes for node in graph}

    for _ in range(num_iterations):
        new_pagerank = {}
        for node in graph:
            # Base rank for the node
            new_rank = (1 - d) / num_nodes
            # Add rank from each page linking to this node
            for other_node in graph:
                if node in graph[other_node]:
                    new_rank += d * (pagerank[other_node] / len(graph[other_node]))
            new_pagerank[node] = new_rank
        pagerank = new_pagerank

    return pagerank
if __name__ == "__main__":
    pagerank_result = calculate_pagerank(graph)
    for node, rank in pagerank_result.items():
        print(f"Page: {node}, Rank: {rank:.4f}")

Page: A, Rank: 0.3642
Page: B, Rank: 0.1848
Page: C, Rank: 0.3782
Page: D, Rank: 0.0428
Page: E, Rank: 0.0300
Selection deleted
### 1. **Importing Libraries**

```python
import numpy as np

### 2. **Graph Representation**

graph = {
    'A': ['B', 'C'],
    'B': ['C'],
    'C': ['A'],
    'D': ['C'],
    'E': ['A', 'D']
}
```
- **Purpose**: The graph is represented as a **dictionary** where the keys are the nodes (pages) and the values are lists of nodes (pages) that the key node links to. For example:
  - Node **'A'** links to **'B'** and **'C'**.
  - Node **'B'** links to **'C'**.
  - Node **'C'** links to **'A'**.
  - Node **'D'** links to **'C'**.
  - Node **'E'** links to **'A'** and **'D'**.

This structure is essential for calculating **PageRank**, which is based on the links between pages in a web graph.


### 3. **PageRank Function Definition**

def calculate_pagerank(graph, d=0.85, num_iterations=100):

- **Purpose**: We define the `calculate_pagerank` function, which accepts the following parameters:
  - **`graph`**: A dictionary representing the directed graph of web pages and their links.
  - **`d` (default 0.85)**: The **damping factor**, which represents the probability that a user will continue clicking on links (rather than jumping to a random page). A typical value for **`d`** is 0.85.
  - **`num_iterations` (default 100)**: The number of iterations to run the algorithm. The more iterations, the more accurate the PageRank results, but 100 iterations is usually enough for convergence.

### 4. **Initializing PageRank Values**

    num_nodes = len(graph)
    pagerank = {node: 1 / num_nodes for node in graph}

- **Purpose**: 
  - **`num_nodes`** is the number of pages in the graph (i.e., the number of nodes).
  - **`pagerank`** is a dictionary where each page initially has an equal rank. Since the total rank must sum to 1, each node starts with a rank of **`1 / num_nodes`**.
  - This is the initial assumption, assuming all pages are equally important.


### 5. **PageRank Iteration Process**

```python
    for _ in range(num_iterations):
        new_pagerank = {}
        for node in graph:
            # Base rank for the node
            new_rank = (1 - d) / num_nodes
            # Add rank from each page linking to this node
            for other_node in graph:
                if node in graph[other_node]:
                    new_rank += d * (pagerank[other_node] / len(graph[other_node]))
            new_pagerank[node] = new_rank
        pagerank = new_pagerank
```

  Purpose: This is the core part of the PageRank calculation. It performs the iteration process for a fixed number of times (num_iterations).

Outer loop: We repeat the ranking process for num_iterations iterations. Each iteration refines the PageRank values.

Inner loop (for each node): For each node in the graph:

Base rank: The formula (1 - d) / num_nodes represents the portion of the PageRank that comes from the random jump (the likelihood that the user jumps to a random page).
Sum of inbound link contributions: For each other node in the graph, we check if it has a link to the current node (if node in graph[other_node]).
If so, the PageRank value from that node is added to the current node's new rank. The formula used here is: new_rank+=d√ó(pagerank[other_node]/ len(graph[other_node])) This reflects that the importance of a page depends on the importance of the pages linking to it and the number of outbound links each linking page has.
After accumulating all contributions, the new rank for the node is saved in the new_pagerank dictionary.
Update pagerank: After processing all nodes, the pagerank dictionary is updated to reflect the new ranks for the next iteration.

6. Returning the Result
return pagerank
The code snippet you've provided contains a conditional statement commonly used in Python to control the execution of a program when it is run as a script. Let me break it down and explain each part in detail:

### 1. **`if __name__ == "__main__":`**
   - **`__name__`** is a special built-in variable in Python. It is automatically set to the name of the current module when the script is imported as a module, but it is set to **`"__main__"`** when the script is run directly.
   - The condition **`if __name__ == "__main__":`** checks if the script is being run directly (as opposed to being imported as a module). This is useful for organizing code so that certain parts of the code only execute when the script is run as the main program, and not when it is imported into another script.

   **Example of use:**
   - If you have a script `pagerank.py` and you run it directly, the condition will be true, and the code inside the block will execute.
   - If the script is imported into another script, the code inside this block will not execute, which allows you to reuse functions and classes without executing the main logic.

### 2. **`pagerank_result = calculate_pagerank(graph)`**
   - **`calculate_pagerank(graph)`** is presumably a function that computes the PageRank of a given graph. 
   - The **`graph`** variable represents a directed graph (e.g., a network of web pages and their links), and the function returns a dictionary where each **`node`** (webpage) has an associated **PageRank score** (a measure of its importance in the graph).
   - The **`pagerank_result`** stores the result returned by the **`calculate_pagerank`** function.

### 3. **`for node, rank in pagerank_result.items():`**
   - This is a **for loop** that iterates through each key-value pair in the **`pagerank_result`** dictionary.
   - **`node`** represents a page or node in the graph, and **`rank`** represents its corresponding PageRank score.
   - The **`pagerank_result.items()`** method returns an iterable of the dictionary‚Äôs key-value pairs, allowing the loop to process each node and its rank.

### 4. **`print(f"Page: {node}, Rank: {rank:.4f}")`**
   - This is a **formatted string** (f-string) that prints the **node (page)** and its **rank**.
   - **`{rank:.4f}`** formats the **rank** to **4 decimal places**. The `.4f` format specifier ensures that the rank is printed as a floating-point number with four digits after the decimal point.
   - For example, if the rank of a page is `0.2546789`, it will be printed as `0.2547`.

1. Graph
A graph is a mathematical structure used to model pairwise relationships between objects. It consists of:

Nodes (or vertices): The individual entities(individual elemen)or points in the graph.
Edges (or links): The connections or relationships between the nodes. For example:
In a graph of web pages, a node could be a web page like "Wikipedia", "Google", or "StackOverflow". Each of these pages would have links pointing to other pages on the web. In the context of the PageRank algorithm:
A graph represents a collection of web pages (nodes) and the hyperlinks (edges) between them. For example, a directed edge from page A to page B means page A contains a link to page B.
Graphs can be:

Directed: Where edges have a direction, meaning the connection goes from one node to another (like hyperlinks between web pages).
Undirected: Where edges do not have a direction (like social connections between people).
In the PageRank algorithm, we typically deal with directed graphs where edges point from one node (web page) to another.

3. PageRank
PageRank is an algorithm developed by Larry Page and Sergey Brin, the founders of Google, in 1996. It is used to rank web pages based on their importance, and it is a core part of how search engines like Google determine the relevance of pages for a given search query.

PageRank assigns a rank (score) to each page in a web graph based on the link structure of the web. The more important (or authoritative) pages that link to a page, the higher the rank of that page.

How PageRank Works:
Basic Idea: The rank of a page is determined by the number and quality of links pointing to it. The more high-ranked pages that link to a page, the more important that page is considered.

This is based on the idea that a "vote" (a link) from an important page is worth more than a vote from a less important one. This is similar to how academic papers are cited: a citation from a well-known paper counts more than a citation from a lesser-known one.

Formula:
The PageRank of a page P is calculated iteratively using the following formula:PageRank(P)= 1-d/N + d ‚àëi‚ààin-links(P) PageRank(i)/ out-degree(i) 1‚àíd / Nis the random jump factor (with ùëë being the damping factor, usually set to 0.85, and N being the total number of pages).
‚àë i‚ààin-links(P) PageRank(i) /out-degree(i) represents the sum of the contributions from the pages linking to P (i.e., inbound links), where the contribution from each linking page is its PageRank divided by the number of outbound links from that page.

Steps in PageRank Algorithm:
Initialize: All pages are given an equal rank.
Iterate: Update the rank of each page based on the ranks of the pages linking to it.
Convergence: Repeat the process until the ranks stabilize (i.e., the difference between the old and new ranks is minimal).
Summary of Terms:
Graph: A structure made up of nodes and edges. In the context of PageRank, a graph represents a collection of web pages (nodes) and hyperlinks (edges) between them.

Node: A node represents an individual entity in a graph. In the case of PageRank, a node represents a web page.

PageRank: A ranking algorithm that assigns a score to each web page based on the number and quality of links pointing to it, helping to determine the page's importance or relevance in the web graph.

Example to Visualize:
Consider a simple web graph:

    A ‚Üí B ‚Üí C
    ‚Üë    ‚Üì
    D ‚Üê E
Nodes: A, B, C, D, E are the pages (web pages).
Edges (links): The arrows between the nodes represent hyperlinks. For instance:
Page A links to pages B and D.
Page B links to C.
Page C links to A.
Page D links to C.
Page E links to A and D.
The PageRank algorithm will assign scores to each page based on the structure of the links:

A page that is linked to by many important pages (like E linking to A and D) will likely receive a higher PageRank.
In this graph:

Page A has a link from E, which is a high-ranked page.
Page B only has a link from A, so its rank might be lower.
Page C has links from A, B, and D, which can contribute to its rank.
Search Engines (Google, Bing, etc.): PageRank is foundational to how search engines rank web pages. Search engines use it (or variants of it) to determine the relevance and importance of pages based on their links, helping deliver more accurate and useful search results.

Recommendation Systems: PageRank-like algorithms help recommend products, movies, songs, or articles by analyzing the web of interactions and preferences. For example, a movie recommendation engine can use personalized or topic-sensitive PageRank to suggest movies based on a user's viewing history or genre preferences.

Social Media Platforms (e.g., Facebook, Twitter): Social networks use variations of PageRank to determine the importance of posts, influential users, or relevant content. For example, a user's influence on Twitter might be evaluated by PageRank, considering both the number of followers and the influence of those followers.

Academic Citation Networks: In academic publishing, PageRank and its variants (like HITS) help identify key papers or authors by analyzing citations and references, improving literature search and analysis.

Online News and Media Sites: Media platforms use PageRank to rank news stories based on how many high-authority sites link to them, helping to prioritize important and high-quality content for readers.

SEO (Search Engine Optimization): PageRank and its variants are used to analyze backlinks (external links pointing to a website) and optimize a site's link structure to improve its ranking on search engines.

E-commerce Websites: Online retailers use Weighted or Personalized PageRank to rank products by importance, relevance, or user preferences, helping to optimize product discovery and enhance user experience.

